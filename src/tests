// -*- c -*-

// This is a line comment.

/*
 * This is a block comment.
 */

int assert(int expected, int actual, char *code) {
    if (expected == actual) {
        printf("%s => %d\n", code, actual);
    } else {
        printf("%s => %d expected but got %d\n", code, expected, actual);
        exit(1);
    }
}

int ret3(){
    return 3;
    return 5;
}

int main() {
    assert(0,({0&1;}),"{0&1;}");
    assert(1,({3&1;}),"{3&1;}");
    assert(3,({7&3;}),"{7&3;}");
    assert(10,({-1&10;}),"{-1&10;}");
    assert(1,({0|1;}),"{0|1;}");
    assert(0,({0^0;}),"{0^0;}");

    assert(47,({5+6*7;}),"{5+6*7;}");
    assert(15,({5* 3;}),"{5* 3;}");
    assert(7,({10 /2 + 2;}),"{10 /2 + 2;}");
    assert(15,({5*(9-6);}),"{5*(9-6);}");
    assert(4,({(3+5)/2;}),"{(3+5)/2;}");
    assert(5,({-10+15;}),"{-10+15;}");
    assert(3,({-(5+2)+10;}),"{-(5+2)+10;}");
    assert(10,({-10+20;}),"{-10+20;}");
    assert(10,({- -10;}),"{- -10;}");
    assert(10,({- - +10;}),"{- - +10;}");

    assert(0,({ 1 < 1;}),"{ 1 < 1;}");
    assert(0,({ 2 < 1;}),"{ 2 < 1;}");
    assert(1,({ 1 < 2;}),"{ 1 < 2;}");
    assert(0,({ 1 > 1;}),"{ 1 > 1;}");
    assert(1,({ 2 > 1;}),"{ 2 > 1;}");
    assert(0,({ 1 > 2;}),"{ 1 > 2;}");
    assert(1,({ 1 <= 1;}),"{ 1 <= 1;}");
    assert(0,({ 2 <= 1;}),"{ 2 <= 1;}");
    assert(1,({ 1 <= 2;}),"{ 1 <= 2;}");
    assert(1,({ 1 >= 1;}),"{ 1 >= 1;}");
    assert(1,({ 2 >= 1;}),"{ 2 >= 1;}");
    assert(0,({ 1 >= 2;}),"{ 1 >= 2;}");
    assert(1,({ 5 == 2 + 3;}),"{ 5 == 2 + 3;}");
    assert(0,({ 2 + 3 != 5;}),"{ 2 + 3 != 5;}");

    assert(30,({int a;a=30; a;}),"{int a;a=30; a;}");
    assert(24,({int a;a=9+15; a;}),"{int a;a=9+15; a;}");
    assert(3, ret3(),"ret3();");
    assert(3,({int a;int b;a=1;b=2; a+b;}),"{int a;int b;a=1;b=2; a+b;}");
    assert(4,({int a;int b;int c;a=b=2;c=a+b; c;}),"{int a;int b;int c;a=b=2;c=a+b; c;}");
    assert(7,({int a; a=4+3; a ;}),"{int a; a=4+3; a ;}");
    assert(6,({int foo; int bar;foo=1;bar=2+3; foo + bar;}),"{int foo; int bar;foo=1;bar=2+3; foo + bar;}");

    assert(2,({int x = 0; if(1<10) x = 2; x;}),"{int x = 0; if(1<10) x = 2; x;}");
    assert(10,({int var; var=1;if(1<10) var=10; var;}),"{int var; var=1;if(1<10) var=10; var;})");
    assert(1,({int var; var=1;if(1>10) var=10; var;}),"{int var; var=1;if(1>10) var=10; var;}");
    assert(2,({int x = 0; if(1<10) x = 2; else x = 3; x;}),"{int x = 0; if(1<10) x = 2; else x = 3; x;}");
    assert(3,({int x = 0; if(11<10) x = 2; else x = 3; x;}),"{int x = 0; if(11<10) x = 2; else x = 3; x;}");
    assert(2,({int x = 0; if(1<10) { x = 2;} else { x = 3;} x;}),"{int x = 0; if(1<10) { x = 2;} else { x = 3;} x;}");
    assert(3,({int x = 0; if(11<10) { x = 2;} else { x = 3;} x;}),"{int x = 0; if(11<10) { x = 2;} else { x = 3;} x;}");
    
    printf("OK\n");
    return 0;
}
