// -*- c -*-

// This is a line comment.

/*
 * This is a block comment.
 */

int assert(int expected, int actual, char *code) {
    if (expected == actual) {
        printf("%s => %d\n", code, actual);
    } else {
        printf("%s => %d expected but got %d\n", code, expected, actual);
        exit(1);
    }
}

int ret3(){
    return 3;
    return 5;
}

int while_if1(){
    int i=0;
    while(i<10){
        if(i==0) return i; 
        return 11;
    }
}

int while_if2(){
    int i=0;
    while(i<10) {
        if(i<5) i=i+1;
        else return i;
    }
    return 11;
}

int for_if1(){
    int i=0;
    for(;i<=10;)
        if(i==0) return i;
    return 11;
}

int for_if2(){
    int i=0;
    for(;i<=10;)
        if(i<5) i=i+1;
        else return i;
    return 11;
}

int for_if3(){
    int i=0;
    for(;i<=10;)
        if(i<5) i=i+1;
        else return i;
    int ret;
    ret=11;
}

int three(){
    return 3;
}

int seven(){
    return 7;
}

int arg1(int a){
    return a;
}

int arg2(int a, int b){
    return a + b;
}

int assign(int a){
    return a = a + 1;
}

int fib(int n){
    if (n == 0) return 0;
    if (n == 1) return 1;
    return fib(n - 2) + fib(n - 1);
}

int foo(int *x, int y){
    return *x + y;
}

int sub_char(char a, char b, char c) {
    return a-b-c;
}

int block_comment(){
    /* return 1; */ return 2;
}

int comment(){
    // return 1;
    return 2;
}

int g1[4];
int g2;
int g3[4];

int main() {

    g1[0]=0;
    g1[1]=1;
    g1[2]=2;
    g1[3]=3;

    assert(0,({0&1;}),"{0&1;}");
    assert(1,({3&1;}),"{3&1;}");
    assert(3,({7&3;}),"{7&3;}");
    assert(10,({-1&10;}),"{-1&10;}");
    assert(1,({0|1;}),"{0|1;}");
    assert(0,({0^0;}),"{0^0;}");

    assert(47,({5+6*7;}),"{5+6*7;}");
    assert(15,({5* 3;}),"{5* 3;}");
    assert(7,({10 /2 + 2;}),"{10 /2 + 2;}");
    assert(15,({5*(9-6);}),"{5*(9-6);}");
    assert(4,({(3+5)/2;}),"{(3+5)/2;}");
    assert(5,({-10+15;}),"{-10+15;}");
    assert(3,({-(5+2)+10;}),"{-(5+2)+10;}");
    assert(10,({-10+20;}),"{-10+20;}");
    assert(10,({- -10;}),"{- -10;}");
    assert(10,({- - +10;}),"{- - +10;}");

    assert(0,({ 1 < 1;}),"{ 1 < 1;}");
    assert(0,({ 2 < 1;}),"{ 2 < 1;}");
    assert(1,({ 1 < 2;}),"{ 1 < 2;}");
    assert(0,({ 1 > 1;}),"{ 1 > 1;}");
    assert(1,({ 2 > 1;}),"{ 2 > 1;}");
    assert(0,({ 1 > 2;}),"{ 1 > 2;}");
    assert(1,({ 1 <= 1;}),"{ 1 <= 1;}");
    assert(0,({ 2 <= 1;}),"{ 2 <= 1;}");
    assert(1,({ 1 <= 2;}),"{ 1 <= 2;}");
    assert(1,({ 1 >= 1;}),"{ 1 >= 1;}");
    assert(1,({ 2 >= 1;}),"{ 2 >= 1;}");
    assert(0,({ 1 >= 2;}),"{ 1 >= 2;}");
    assert(1,({ 5 == 2 + 3;}),"{ 5 == 2 + 3;}");
    assert(0,({ 2 + 3 != 5;}),"{ 2 + 3 != 5;}");

    assert(30,({int a;a=30; a;}),"{int a;a=30; a;}");
    assert(24,({int a;a=9+15; a;}),"{int a;a=9+15; a;}");
    assert(3, ret3(),"ret3()");
    assert(3,({int a;int b;a=1;b=2; a+b;}),"{int a;int b;a=1;b=2; a+b;}");
    assert(4,({int a;int b;int c;a=b=2;c=a+b; c;}),"{int a;int b;int c;a=b=2;c=a+b; c;}");
    assert(7,({int a; a=4+3; a ;}),"{int a; a=4+3; a ;}");
    assert(6,({int foo; int bar;foo=1;bar=2+3; foo + bar;}),"{int foo; int bar;foo=1;bar=2+3; foo + bar;}");

    assert(2,({int x = 0; if(1<10) x = 2; x;}),"{int x = 0; if(1<10) x = 2; x;}");
    assert(10,({int var; var=1;if(1<10) var=10; var;}),"{int var; var=1;if(1<10) var=10; var;})");
    assert(1,({int var; var=1;if(1>10) var=10; var;}),"{int var; var=1;if(1>10) var=10; var;}");
    assert(2,({int x = 0; if(1<10) x = 2; else x = 3; x;}),"{int x = 0; if(1<10) x = 2; else x = 3; x;}");
    assert(3,({int x = 0; if(11<10) x = 2; else x = 3; x;}),"{int x = 0; if(11<10) x = 2; else x = 3; x;}");
    assert(2,({int x = 0; if(1<10) { x = 2;} else { x = 3;} x;}),"{int x = 0; if(1<10) { x = 2;} else { x = 3;} x;}");
    assert(3,({int x = 0; if(11<10) { x = 2;} else { x = 3;} x;}),"{int x = 0; if(11<10) { x = 2;} else { x = 3;} x;}");

    assert(2,({0?1:2;}),"{0?1:2;}");
    assert(1,({1?1:2;}),"{1?1:2;}");
    assert(3,({1,2,3;}),"{1,2,3;}");    
    
    assert(10,({int i=0;while(i<10)i=i+1; i;}),"{int i=0;while(i<10)i=i+1; i;}");
    assert(10,({int i=0;while(i<10){i=i+1;} i;}),"{int i=0;while(i<10){i=i+1;} i;}");
    assert(0,while_if1(),"while_if1()");
    assert(5,while_if2(),"while_if2()");

    assert(55,({int i=0; int j=0; for (i=0; i<=10; i=i+1) j=i+j; j; })," { int i=0; int j=0; for (i=0; i<=10; i=i+1) j=i+j; j; }");
    assert(20,({int i;int a; a=10;for(i=0;i<10;i=i+1)a=a+1; a;}),"{int i;int a; a=10;for(i=0;i<10;i=i+1)a=a+1; return a;}");
    assert(11,({int i; i=0;for(;i<=10;)i=i+1; i;}),"{int i; i=0;for(;i<=10;)i=i+1;return i;}");
    assert(0,for_if1(),"for_if1()");
    assert(5,for_if2(),"for_if2()");
    assert(5,for_if3(),"for_if3()");

    assert(10,({three() + seven();}),"{return three() + seven();}");

    assert(5,({arg1(5);}),"{arg1(5);}");
    assert(10,({arg2(0, 10);}),"{arg2(0, 10);}");
    assert(10,({arg2(10, 0);}),"{arg2(10, 0);}");
    assert(10,({arg2(2*2,2+4);}),"{arg2(2*2,2+4);}");

    assert(1,assign(0),"assign(0)");

    assert(55,fib(10),"fib(10)");

    assert(3,({int x;int *y;y = &x;*y = 3;x;}),"{int x;int *y;y = &x;*y = 3;x;}");
    assert(3,({int x=3; *&x;}),"{int x=3; *&x;}");
    assert(3,({int x=3; int *y=&x; int **z=&y; **z;}),"{int x=3; int *y=&x; int **z=&y; **z;}");
    assert(5,({int x=3; int y=5; *(&x+1);}),"{int x=3; int y=5; *(&x+1);}");
    assert(5,({int x=3; int y=5; *(1+&x);}),"{int x=3; int y=5; *(1+&x);}");
    assert(3,({int x=3; int y=5; *(&y-1);}),"{int x=3; int y=5; *(&y-1);}");
    assert(2,({int x=3; (&x+2)-&x;}),"{int x=3; (&x+2)-&x;}");
    assert(5,({int x=3; int y=5; int *z=&x; *(z+1);}),"{int x=3; int y=5; int *z=&x; *(z+1);}");
    assert(3,({int x=3; int y=5; int *z=&y; *(z-1);}),"{int x=3; int y=5; int *z=&y; *(z-1);}");
    assert(5,({int x=3; int *y=&x; *y=5; x;}),"{int x=3; int *y=&x; *y=5; x;}");
    assert(7,({int x=3; int y=5; *(&x+1)=7; y;}),"{int x=3; int y=5; *(&x+1)=7; y;}");
    assert(7,({int x=3; int y=5; *(&y-1)=7; x;}),"{int x=3; int y=5; *(&y-1)=7; x;}");
    assert(8,({int x=3; int y=5; *&x + y;}),"{int x=3; int y=5; *&x + y;}");

    assert(4,({int x=3; sizeof(x);}),"{int x=3; sizeof(x);}");
    assert(4,({int x=3; sizeof x;}),"{int x=3; sizeof x;}");
    assert(8,({int x=3; sizeof(&x);}),"{int x=3; sizeof(&x);}");

    assert(3,({int x[2]; int *y=&x; *y=3; *x;}),"{int x[2]; int *y=&x; *y=3; *x;}");
    assert(3,({int a[2]; *a = 1; *(a + 1) = 2; int *p; p = a; *p + *(p + 1);}),"{int a[2]; *a = 1; *(a + 1) = 2; int *p; p = a; *p + *(p + 1);}");

    assert(3,({int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *x;}),"{int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *x;}");
    assert(4,({int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+1);}),"{int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+1);}");
    assert(5,({int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+2);}),"{int x[3]; *x=3; *(x+1)=4; *(x+2)=5; *(x+2);}");

    assert(3,({int x[3]; x[0]=3; x[1]=4; x[2]=5; *x;}),"{int x[3]; x[0]=3; x[1]=4; x[2]=5; *x;}");
    assert(4,({int x[3]; x[0]=3; x[1]=4; x[2]=5; *(x+1);}),"{int x[3]; x[0]=3; x[1]=4; x[2]=5; *(x+1);}");
    assert(5,({int x[3]; x[0]=3; x[1]=4; x[2]=5; *(x+2);}),"{int x[3]; x[0]=3; x[1]=4; x[2]=5; *(x+2);}");

    assert(7,({int x; char y; int a=&x; int b=&y; b-a;}),"{int x; char y; int a=&x; int b=&y; b-a;}");
    assert(1,({char x; int y; int a=&x; int b=&y; b-a;}),"{char x; int y; int a=&x; int b=&y; b-a;}");

    assert(0,({g1[0];}),"{g1[0];}");
    assert(1,({g1[1];}),"{g1[1];}");
    assert(2,({g1[2];}),"{g1[2];}");
    assert(3,({g1[3];}),"{g1[3];}");

    assert(4,({sizeof(g2);}),"{sizeof(g2);}");
    assert(16,({sizeof(g3);}),"{sizeof(g3);}");

    assert(1,({char x=1; x;}),"{char x=1; x;}");
    assert(1,({char x=1; char y=2; x;}),"{char x=1; char y=2; x;}");
    assert(2,({char x=1; char y=2; y;}),"{char x=1; char y=2; y;}");
    assert(1,sub_char(7, 3, 3),"sub_char(7, 3, 3)");

    assert(97,({"abc"[0];}),"{\"abc\"[0];}");
    assert(98,({"abc"[1];}),"{\"abc\"[1];}");
    assert(99,({"abc"[2];}),"{\"abc\"[2];}");
    assert(0,({"abc"[3];}),"{\"abc\"[3];}");
    assert(4,({sizeof("abc");}),"{sizeof(\"abc\");}");

    assert(97,({"abc"[0];}),"{\"abc\"[0];}");
    assert(98,({"abc"[1];}),"{\"abc\"[1];}");
    assert(99,({"abc"[2];}),"{\"abc\"[2];}");
    assert(0,({"abc"[3];}),"{\"abc\"[3];}");
    assert(4,({sizeof("abc");}),"{sizeof(\"abc\");}");

    assert(7,({"\a"[0];}),"{\"\a\"[0];}");
    assert(8,({"\b"[0];}),"{\"\b\"[0];}");
    assert(9,({"\t"[0];}),"{\"\t\"[0];}");
    assert(10,({"\n"[0];}),"{\"\n\"[0];}");
    assert(11,({"\v"[0];}),"{\"\v\"[0];}");
    assert(12,({"\f"[0];}),"{\"\f\"[0];}");
    assert(13,({"\r"[0];}),"{\"\r\"[0];}");
    assert(27,({"\e"[0];}),"{\"\e\"[0];}");
    assert(0,({"\0"[0];}),"{\"\0\"[0];}");
    
    assert(2,block_comment(),"block_comment()");
    assert(2,comment(),"comment()");

    assert(1,({ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }),"{ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }");
    assert(2,({ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }),"{ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }");
    assert(1,({ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }),"{ struct {int a; int b;} x; x.a=1; x.b=2; x.a; }");
    assert(2,({ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }),"{ struct {int a; int b;} x; x.a=1; x.b=2; x.b; }");
    assert(3,({ struct {int a; int b; int c;} x; x.a=1; x.b=2; x.c=3; x.c;}),"{ struct {int a; int b; int c;} x; x.a=1; x.b=2; x.c=3; x.c; }");

    assert(0,({ struct {int a; int b;} x[3]; int *p=x; p[0]=0; x[0].a; }),"{ struct {int a; int b;} x[3]; int *p=x; p[0]=0; x[0].a;}");
    assert(1,({ struct {int a; int b;} x[3]; int *p=x; p[1]=1; x[0].b; }),"{ struct {int a; int b;} x[3]; int *p=x; p[1]=1; x[0].b;}");
    assert(2,({ struct {int a; int b;} x[3]; int *p=x; p[2]=2; x[1].a; }),"{ struct {int a; int b;} x[3]; int *p=x; p[2]=2; x[1].a;}");
    assert(3,({ struct {int a; int b;} x[3]; int *p=x; p[3]=3; x[1].b; }),"{ struct {int a; int b;} x[3]; int *p=x; p[3]=3; x[1].b;}");

    assert(2,({int x[2][3]={{1,2,3},{4,5,6}}; x[0][1];}),"{int x[2][3]={{1,2,3},{4,5,6}}; x[0][1];}");
    assert(4,({int x[2][3]={{1,2,3},{4,5,6}}; x[1][0];}),"{int x[2][3]={{1,2,3},{4,5,6}}; x[1][0];}");
    assert(6,({int x[2][3]={{1,2,3},{4,5,6}}; x[1][2];}),"{int x[2][3]={{1,2,3},{4,5,6}}; x[1][2];}");
    assert(0,({int x[3]={}; x[0];}),"{int x[3]={}; x[0];}");
    assert(0,({int x[3]={}; x[1];}),"{int x[3]={}; x[1];}");
    assert(0,({int x[3]={}; x[2];}),"{int x[3]={}; x[2];}");
    assert(2,({int x[2][3]={{1,2}}; x[0][1]; }),"{int x[2][3]={{1,2}}; x[0][1]; }");
    assert(0,({int x[2][3]={{1,2}}; x[1][0]; }),"{int x[2][3]={{1,2}}; x[1][0]; }");
    assert(0,({int x[2][3]={{1,2}}; x[1][2]; }),"{int x[2][3]={{1,2}}; x[1][2]; }");

    printf("OK\n");
    return 0;
}
